Nazwa pliku: wizardlm_random_narrative_feedback.txt
Data: 2025-09-13
Temat: WizardLM + Electron – generateRandomDescription zwraca tagi zamiast opisów (naprawa promptów i formatowania)

1) Kontekst i objawy
- Po naprawie stop sequences (używamy USER: zamiast ASSISTANT:) Random generuje różnorodne wyniki.
- Nowy problem: model zwraca listy tagów lub miks tagów z opisem zamiast czystej prozy.
- Przykłady:
  (Tags: woman, 18s, japanese, curvy build, realistic, amateur, suggestive) – prefiks i nawiasy
  (Woman, 18s, japanese, curvy build, realistic, amateur) – czyste tagi w nawiasach
  Curvy, Realistic, Amateur, Suggestive, Scene: A young woman... – miks tagów i opisu

2) Główna przyczyna
- Prompty wprost żądają “comma-separated tags” (zarówno system, jak i user content), więc model zgodnie z instrukcją zwraca tagi.
- Dodatkowo brak “format lock” z przykładami (bad/good) ułatwia modelowi powrót do trybu tagów.

3) Odpowiedzi na pytania
1. Czy system prompt powinien prosić o “opisy scen” zamiast “comma-separated tags”?
   - Tak. Przełącz system prompt na “creative visual storyteller” i zakaz list/tagów; poproś o 2–3 zdania prozy.

2. Jak zmodyfikować user content, żeby LLM generował narracyjne opisy?
   - Poproś o 1 akapit, 2–3 zdania (35–80 słów), bez list/etykiet/nawiasów/quotes.
   - Dodaj anty-przykład (“Bad: Tags: …”) i właściwy przykład (“Good: A young woman …”).

3. Czy normalizeToTagsLine powinna być używana dla opisów?
   - Nie. Zostaw ją do zadań w trybie “tagi”. Dla opisów dodaj delikatny normalizer prozy: normalizeNarrative.

4. Jak sprawić, by LLM nie dodawał prefiksów “Tags:” ani nawiasów?
   - Po stronie promptu: zakaz używania etykiet/nawiasów.
   - Po stronie postprocessingu: normalizeNarrative usuwa wiodące “Tags: …”, nawiasowe bloki z tagami, pojedyncze cudzysłowy itp.

4) Zmiany w kodzie (kopiuj-wklej)

A. Dodaj delikatny normalizer prozy do customApiService.ts
--------------------------------------------------------
/**
 * Minimalne czyszczenie prozy: usuwa role/etykiety/nawiasowe tagi na początku,
 * scala spacje, obcina do 2–3 zdań i dopina kropkę jeśli brak.
 */
function normalizeNarrative(text: string): string {
  let s = (text ?? '').toString();

  // Usuń code fences i pseudo-XML
  s = s.replace(/```[\s\S]*?```/g, ' ').replace(/<[^>]*>/g, ' ');
  s = s.replace(/```math
\/?INST```|<<\/?SYS>>|<\/?SYS>|<\/?SYSTEM>|```math
SYS```|<\/?assistant>|<\/?user>/gi, '');

  // Wytnij wstępne numerowanie/listy
  s = s.replace(/^\s*KATEX_INLINE_OPEN?\d+KATEX_INLINE_CLOSE?[.)]\s+/, '');

  // Jeśli pojawi się "Scene:" lub "Description:" – trzymaj to, co po dwukropku
  const sceneIdx = s.search(/\b(scene|description)\s*:/i);
  if (sceneIdx >= 0) {
    s = s.slice(s.indexOf(':', sceneIdx) + 1);
  }

  // Usuń wiodące "Tags: ..." (różne warianty) wraz z ewentualnymi nawiasami
  s = s.replace(/^\s*tags?\s*:\s*[^\n]*KATEX_INLINE_CLOSE\s*[-–—:]*\s*/i, '');
  s = s.replace(/^\s*tags?\s*:\s*[^\n]*[-–—:]\s*/i, '');
  s = s.replace(/^\s*tags?\s*:\s*[^\n]*\s*/i, '');

  // Usuń wiodący blok nawiasowy jeśli wygląda na listę tagów (≥2 przecinki)
  s = s.replace(/^\s*KATEX_INLINE_OPEN(?:[^()]*?,){2,}[^()]*KATEX_INLINE_CLOSE\s*[-–—:]*\s*/, '');

  // Usuń cudzysłowy/backticki na brzegach
  s = s.replace(/^["'`]+|["'`]+$/g, '');

  // Zredukuj białe znaki
  s = s.replace(/\r?\n+/g, ' ').replace(/\s{2,}/g, ' ').trim();

  // Zatrzymaj do 2–3 pierwszych zdań (jeśli model się rozgada)
  const sentences = s.split(/(?<=[.!?])\s+/).filter(Boolean);
  if (sentences.length > 3) {
    s = sentences.slice(0, 3).join(' ');
  }

  // Dopnij kropkę jeśli brak
  if (!/[.!?]"?$/.test(s) && s.length > 0) {
    s += '.';
  }

  return s;
}

B. Zmień generateRandomDescription na tryb narracyjny (proza)
-------------------------------------------------------------
- Zastąp dotychczasowe prompty (które prosiły o tagi) narracyjnymi.
- Usuń wywołanie normalizeToTagsLine – użyj normalizeNarrative.
- Zostaw STOP_SEQS (tylko USER: warianty).

export const generateRandomDescription = async (
  config: CustomApiConfig,
  nsfwSettings: NsfwSettingsState,
  styleFilter: StyleFilter,
  characterSettings: CharacterSettingsState,
  selectedPresets: string[]
): Promise<string> => {
  // System prompt: storyteller (nie tag generator)
  const systemPrompt = `You are a creative visual storyteller.
Write concise, vivid scene descriptions in natural English prose (not tags).
Use concrete visual details: subject, setting, lighting, composition, mood.
Return only the description; no labels, no lists, no parentheses, no quotes.`;

  // Baza elementów dla inspiracji
  const baseElements: string[] = [];
  if (characterSettings.gender === 'male') baseElements.push('man');
  else if (characterSettings.gender === 'female') baseElements.push('woman');

  if (characterSettings.age && characterSettings.age !== 'any') baseElements.push(`${characterSettings.age}`);
  if (characterSettings.ethnicity && characterSettings.ethnicity !== 'any') baseElements.push(`${characterSettings.ethnicity}`);
  if (characterSettings.bodyType && characterSettings.bodyType !== 'any') baseElements.push(`${characterSettings.bodyType} build`);
  baseElements.push(`${styleFilter.main}`);
  if (styleFilter.sub && styleFilter.sub !== 'any') baseElements.push(`${styleFilter.sub}`);
  if (nsfwSettings.mode === 'nsfw') baseElements.push('suggestive');
  else if (nsfwSettings.mode === 'hardcore') baseElements.push('explicit');
  if (selectedPresets.length > 0) baseElements.push(...selectedPresets);

  const basePrompt = baseElements.join(', ');

  const userContent = [
    `Using these elements: ${basePrompt}.`,
    `Write a single paragraph of 2–3 sentences (35–80 words), natural English.`,
    `Do NOT output comma-separated tags, lists, labels, headings, or parentheses.`,
    `Start directly with the description. No quotes. Return only the description text.`,
    `Bad: "Tags: woman, curvy, realistic, cinematic lighting"`,
    `Good: "A young woman with a curvy build sits alone on a rustic wooden bench, a suggestive smile playing at the corner of her mouth. Soft, warm light pools across her face and the weathered wood, while the background melts into a gentle blur."`
  ].join(' ');

  const messages = [
    { role: 'system', content: systemPrompt },
    { role: 'user', content: userContent }
  ];

  console.log('🔍 DEBUG: generateRandomDescription(narrative) called');
  console.log('🔍 DEBUG: Base elements:', baseElements);
  console.log('🔍 DEBUG: User content:', userContent);

  try {
    const response = await makeApiCall(config, messages, {
      temperature: 0.8,   // nieco wyżej dla żywszej prozy
      top_p: 0.95,
      maxTokens: 180,
      stop: STOP_SEQS
    });

    console.log('🔍 DEBUG: Raw LLM response:', JSON.stringify(response));
    const cleaned = normalizeNarrative(response);
    console.log('🔍 DEBUG: Narrative (normalized):', JSON.stringify(cleaned));

    if (cleaned && cleaned.length > 20) return cleaned;

    // Fallback: syntetyczny opis bazujący na baseElements (rzadki przypadek)
    const fallback = buildFallbackNarrative(baseElements);
    console.log('🔍 DEBUG: Fallback narrative:', JSON.stringify(fallback));
    return fallback;
  } catch (error) {
    console.error('Local LLM error:', error);
    return buildFallbackNarrative(baseElements);
  }
};

// Prosty fallback opisowy
function buildFallbackNarrative(elements: string[]): string {
  const subject = elements.find(e => /woman|man/i.test(e)) || 'person';
  const mood = elements.find(e => /(suggestive|explicit)/i.test(e)) ? 'with a bold, intimate mood' : 'with a calm, reflective mood';
  const style = elements.find(e => /(cinematic|realistic|artistic|photorealistic|professional)/i.test(e)) || 'cinematic';
  return `A ${subject} in a thoughtfully composed scene, ${mood}. Gentle, ${style} lighting shapes the subject while the background falls softly out of focus. The environment adds texture and depth, inviting the viewer into the moment.`;
}

C. Upewnij się, że STOP_SEQS są bez “ASSISTANT:”
-------------------------------------------------
W customApiService.ts (i domyślnie w main.js przez unifyStop) powinno być:
  const STOP_SEQS = ['USER:', '\nUSER:', '\n\nUSER:'];

D. (Ważne) TheBloke template – trailing space po ASSISTANT:
-----------------------------------------------------------
Jeśli jeszcze nie dodałeś, zadbaj o spację po “ASSISTANT:” w buildTheBlokePrompt, by model nie “kleił” pierwszego słowa.
Zmień:
  return `${preamble}\n\nUSER: ${userText}\nASSISTANT:`;
Na:
  return `${preamble}\n\nUSER: ${userText}\nASSISTANT: `;

5) Parametry i wskazówki
- temperature: 0.8–0.9 (kreatywność), top_p: 0.9–0.95, maxTokens: 160–220 (2–3 zdania).
- Nie używaj normalizeToTagsLine w trybie narracyjnym – tylko normalizeNarrative.
- Jeśli model sporadycznie “ucieka” do tagów, w promptach zostaw anty-przykład i “Return only the description; no labels, no parentheses, no quotes.”
- Debug:
  - Loguj: [PROMPT], [RAW OUT], [Narrative normalized].
  - Sprawdź długości przed/po (len > 20 to sensowny próg minimalny).
  - W main.js nie tnij po “ASSISTANT:”, tylko po “USER:” (jak już robicie).

6) Opcjonalnie: przełącznik formatów (‘tags’ | ‘prose’)
- Możesz dodać parametr outputFormat do generateRandomDescription i w zależności od niego:
  - outputFormat === 'tags' → stary prompt + normalizeToTagsLine,
  - outputFormat === 'prose' → nowy prompt + normalizeNarrative.

7) Checklist wdrożenia
- [ ] System prompt mówi o prozie (“visual storyteller”), nie o tagach.
- [ ] User content: 2–3 zdania, zakaz list/etykiet/nawiasów, przykład bad/good.
- [ ] STOP_SEQS zawiera tylko warianty USER: (bez ASSISTANT:).
- [ ] buildTheBlokePrompt kończy się “ASSISTANT: ” (ze spacją).
- [ ] generateRandomDescription używa normalizeNarrative (nie normalizeToTagsLine).
- [ ] Fallback tworzy krótki opis prozą, nie tagi.
- [ ] Logi: raw response + narrative normalized.

8) Przykładowy efekt (oczekiwany)
Wejście (baseElements): woman, young adult, japanese, curvy build, realistic, cinematic
Przykładowy output:
A young Japanese woman with a curvy build rests on a weathered wooden bench, a quiet confidence in her gaze. Soft, cinematic light brushes her features and spills across the grain of the wood, while the background dissolves into a gentle blur that deepens the intimate mood.

— Koniec —